import streamlit as st
import pandas as pd
import pickle
import joblib
from gtts import gTTS
from io import BytesIO
import speech_recognition as sr
import numpy as np
import re
import time
from weather import get_weather, get_weather_telugu, get_weather_hindi

# Custom CSS for modern UI with green and white theme
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(135deg, #4CAF50 0%, #81C784 50%, #A5D6A7 100%);
        padding: 3rem;
        border-radius: 20px;
        text-align: center;
        color: white;
        margin-bottom: 2rem;
        box-shadow: 0 12px 40px rgba(76, 175, 80, 0.3);
        animation: fadeIn 1s ease-in;
    }
    
    .welcome-card {
        background: linear-gradient(135deg, #E8F5E8 0%, #F1F8E9 100%);
        padding: 2rem;
        border-radius: 15px;
        margin: 1.5rem 0;
        border: 2px solid #4CAF50;
        box-shadow: 0 8px 25px rgba(76, 175, 80, 0.2);
        animation: slideUp 0.8s ease-out;
    }
    
    .section-card {
        background: linear-gradient(135deg, #FFFFFF 0%, #F8FFF8 100%);
        padding: 2rem;
        border-radius: 15px;
        box-shadow: 0 6px 20px rgba(0,0,0,0.1);
        margin-bottom: 2rem;
        border-left: 5px solid #4CAF50;
        transition: all 0.3s ease;
    }
    
    .section-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 30px rgba(76, 175, 80, 0.2);
    }
    
    .input-group {
        background: linear-gradient(135deg, #F1F8E9 0%, #E8F5E8 100%);
        padding: 1.5rem;
        border-radius: 12px;
        margin-bottom: 1.5rem;
        border: 1px solid #A5D6A7;
    }
    
    .voice-button {
        background: linear-gradient(45deg, #4CAF50, #66BB6A);
        color: white;
        border: none;
        padding: 0.8rem 1.5rem;
        border-radius: 25px;
        cursor: pointer;
        font-weight: bold;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px rgba(76, 175, 80, 0.3);
    }
    
    .voice-button:hover {
        transform: scale(1.05);
        box-shadow: 0 6px 20px rgba(76, 175, 80, 0.4);
        background: linear-gradient(45deg, #66BB6A, #4CAF50);
    }
    
    .result-box {
        background: linear-gradient(135deg, #C8E6C9 0%, #DCEDC8 100%);
        padding: 2rem;
        border-radius: 15px;
        margin: 1.5rem 0;
        border-left: 5px solid #2E7D32;
        box-shadow: 0 6px 20px rgba(46, 125, 50, 0.2);
        animation: resultSlide 0.6s ease-out;
    }
    
    .listening-indicator {
        background: linear-gradient(45deg, #FF5722, #FF7043);
        color: white;
        padding: 1rem 2rem;
        border-radius: 25px;
        text-align: center;
        animation: pulse 1.5s infinite;
        margin: 1rem 0;
    }
    
    .query-input {
        background: linear-gradient(135deg, #FFFFFF 0%, #F8FFF8 100%);
        border: 2px solid #4CAF50;
        border-radius: 15px;
        padding: 1rem;
        font-size: 1.1rem;
        width: 100%;
        transition: all 0.3s ease;
    }
    
    .query-input:focus {
        box-shadow: 0 0 20px rgba(76, 175, 80, 0.3);
        outline: none;
    }
    
    .language-selector {
        background: linear-gradient(135deg, #E8F5E8 0%, #F1F8E9 100%);
        padding: 1rem;
        border-radius: 10px;
        margin: 1rem 0;
        border: 1px solid #A5D6A7;
    }
    
    .step-card {
        background: linear-gradient(135deg, #FFFFFF 0%, #F8FFF8 100%);
        padding: 1.5rem;
        border-radius: 12px;
        margin: 1rem 0;
        border-left: 4px solid #4CAF50;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }
    
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(-30px); }
        to { opacity: 1; transform: translateY(0); }
    }
    
    @keyframes slideUp {
        from { opacity: 0; transform: translateY(30px); }
        to { opacity: 1; transform: translateY(0); }
    }
    
    @keyframes resultSlide {
        from { opacity: 0; transform: translateX(-30px); }
        to { opacity: 1; transform: translateX(0); }
    }
    
    @keyframes pulse {
        0% { opacity: 1; transform: scale(1); }
        50% { opacity: 0.8; transform: scale(1.02); }
        100% { opacity: 1; transform: scale(1); }
    }
    
    .stButton > button {
        background: linear-gradient(45deg, #4CAF50, #66BB6A);
        color: white;
        border: none;
        border-radius: 25px;
        padding: 0.8rem 2rem;
        font-weight: bold;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px rgba(76, 175, 80, 0.3);
    }
    
    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(76, 175, 80, 0.4);
    }
</style>
""", unsafe_allow_html=True)

# Initialize session state
if 'page_state' not in st.session_state:
    st.session_state.page_state = 'welcome'
if 'language' not in st.session_state:
    st.session_state.language = 'English'
if 'user_query' not in st.session_state:
    st.session_state.user_query = ''
if 'query_type' not in st.session_state:
    st.session_state.query_type = None

# Safe model loading
@st.cache_resource
def load_models():
    try:
        crop_model = joblib.load("crop_model (1).pkl")
        le = joblib.load("label_encoder (1).pkl")
        return crop_model, le
    except Exception as e:
        st.error(f"‚ùå Model loading failed: {e}")
        st.info("Please ensure 'crop_model (1).pkl' and 'label_encoder (1).pkl' are in the same directory as this script.")
        st.stop()

# Speech recognition setup
recognizer = sr.Recognizer()

def speak(text, lang='en', autoplay=True):
    """Enhanced speak function with autoplay option"""
    try:
        tts = gTTS(text=text, lang=lang)
        fp = BytesIO()
        tts.write_to_fp(fp)
        
        if autoplay:
            st.audio(fp.getvalue(), format='audio/mp3', autoplay=True)
        else:
            st.audio(fp.getvalue(), format='audio/mp3')
        return True
    except Exception as e:
        st.warning(f"Voice output failed: {e}")
        return False

def listen_to_speech(lang_code='en-US'):
    """Speech recognition function"""
    try:
        with sr.Microphone() as source:
            recognizer.adjust_for_ambient_noise(source, duration=1)
            st.info("üé§ Listening... Please speak now")
            audio = recognizer.listen(source, timeout=10, phrase_time_limit=15)
            
        # Convert speech to text
        text = recognizer.recognize_google(audio, language=lang_code)
        return text
    except sr.RequestError:
        st.error("Could not connect to speech recognition service")
        return None
    except sr.UnknownValueError:
        st.warning("Could not understand audio. Please try again.")
        return None
    except sr.WaitTimeoutError:
        st.warning("No speech detected. Please try again.")
        return None
    except Exception as e:
        st.error(f"Speech recognition error: {e}")
        return None

def voice_input_field(label, key, input_type="text", min_val=None, max_val=None, step=None):
    """Custom voice input field component"""
    col1, col2 = st.columns([3, 1])
    
    with col1:
        if input_type == "text":
            value = st.text_input(label, key=key)
        elif input_type == "number":
            value = st.number_input(label, min_value=min_val, max_value=max_val, step=step, key=key)
        elif input_type == "float":
            value = st.number_input(label, min_value=min_val, max_value=max_val, step=step, key=key)
    
    with col2:
        if st.button(f"üé§", key=f"voice_{key}", help="Click to speak"):
            with st.spinner("Listening..."):
                lang_code = 'te-IN' if st.session_state.language == '‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å' else 'hi-IN' if st.session_state.language == '‡§π‡§ø‡§®‡•ç‡§¶‡•Ä' else 'en-US'
                speech_text = listen_to_speech(lang_code)
                
                if speech_text:
                    st.success(f"Heard: {speech_text}")
                    
                    # Process the speech input based on type
                    if input_type in ["number", "float"]:
                        try:
                            # Extract numbers from speech
                            numbers = re.findall(r'\d+\.?\d*', speech_text)
                            if numbers:
                                value = float(numbers[0]) if input_type == "float" else int(numbers[0])
                                st.session_state[key] = value
                                st.rerun()
                        except:
                            st.warning("Could not extract number from speech")
                    else:
                        st.session_state[key] = speech_text
                        st.rerun()
    
    return value

def analyze_query(query):
    """Analyze user query to determine intent"""
    query_lower = query.lower()
    
    weather_keywords = ['weather', 'temperature', 'rain', 'climate', 'forecast', '‡∞µ‡∞æ‡∞§‡∞æ‡∞µ‡∞∞‡∞£‡∞Ç', '‡∞µ‡∞∞‡±ç‡∞∑‡∞Ç', '‡∞Æ‡•å‡§∏‡§Æ', '‡§¨‡§æ‡§∞‡§ø‡§∂', '‡§ú‡§≤‡§µ‡§æ‡§Ø‡•Å']
    crop_keywords = ['crop', 'farming', 'agriculture', 'plant', 'harvest', 'recommendation', '‡∞™‡∞Ç‡∞ü', '‡∞µ‡±ç‡∞Ø‡∞µ‡∞∏‡∞æ‡∞Ø‡∞Ç', '‡§´‡§∏‡§≤', '‡§ï‡•É‡§∑‡§ø', '‡§ñ‡•á‡§§‡•Ä']
    
    if any(keyword in query_lower for keyword in weather_keywords):
        return 'weather'
    elif any(keyword in query_lower for keyword in crop_keywords):
        return 'crop'
    else:
        return 'general'

# Page configuration
st.set_page_config(
    page_title="üåø AI Agri Voice Assistant", 
    layout="wide",
    initial_sidebar_state="collapsed"
)

# Main header
st.markdown("""
<div class="main-header">
    <h1>üåø AI Agri Voice Assistant</h1>
    <p>Your Smart Farming Companion with Voice Support</p>
</div>
""", unsafe_allow_html=True)

# Language selection
st.markdown("""
<div class="language-selector">
    <h3>üåê Choose Your Language / ‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç / ‡∞≠‡∞æ‡∞∑ ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø</h3>
</div>
""", unsafe_allow_html=True)

lang = st.radio("", ["English", "‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å", "‡§π‡§ø‡§®‡•ç‡§¶‡•Ä"], horizontal=True, key="language_selector")
st.session_state.language = lang

# Welcome section
if st.session_state.page_state == 'welcome':
    # Welcome message based on language
    if lang == "‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å":
        welcome_msg = """
        ## üôè ‡∞∏‡±ç‡∞µ‡∞æ‡∞ó‡∞§‡∞Ç ‡∞∞‡±à‡∞§‡±Å ‡∞Æ‡∞ø‡∞§‡±ç‡∞∞‡±Å‡∞≤‡±Å!
        
        **‡∞Æ‡±Ä ‡∞∏‡±ç‡∞Æ‡∞æ‡∞∞‡±ç‡∞ü‡±ç ‡∞µ‡±ç‡∞Ø‡∞µ‡∞∏‡∞æ‡∞Ø ‡∞∏‡∞π‡∞æ‡∞Ø‡∞ï‡±Å‡∞°‡∞ø‡∞ï‡∞ø ‡∞∏‡±ç‡∞µ‡∞æ‡∞ó‡∞§‡∞Ç**
        
        ‡∞à ‡∞Ö‡∞™‡±ç‡∞≤‡∞ø‡∞ï‡±á‡∞∑‡∞®‡±ç ‡∞Æ‡±Ä‡∞ï‡±Å ‡∞Ö‡∞Ç‡∞¶‡∞ø‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø:
        - üå§Ô∏è ‡∞µ‡∞æ‡∞§‡∞æ‡∞µ‡∞∞‡∞£ ‡∞∏‡∞Æ‡∞æ‡∞ö‡∞æ‡∞∞‡∞Ç
        - üå± ‡∞™‡∞Ç‡∞ü ‡∞∏‡∞ø‡∞´‡∞æ‡∞∞‡±ç‡∞∏‡±Å‡∞≤‡±Å
        - üé§ ‡∞µ‡∞æ‡∞Ø‡∞ø‡∞∏‡±ç ‡∞∏‡∞™‡±ã‡∞∞‡±ç‡∞ü‡±ç
        
        **‡∞Æ‡±Ä‡∞ï‡±Å ‡∞è‡∞Æ‡∞ø ‡∞Ö‡∞µ‡∞∏‡∞∞‡∞Ç? ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞ü‡±à‡∞™‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø ‡∞≤‡±á‡∞¶‡∞æ ‡∞Æ‡∞æ‡∞ü‡±ç‡∞≤‡∞æ‡∞°‡∞Ç‡∞°‡∞ø...**
        """
        placeholder_text = "‡∞â‡∞¶‡∞æ‡∞π‡∞∞‡∞£: ‡∞µ‡∞æ‡∞§‡∞æ‡∞µ‡∞∞‡∞£‡∞Ç ‡∞ó‡±Å‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø ‡∞§‡±Ü‡∞≤‡±Å‡∞∏‡±Å‡∞ï‡±ã‡∞µ‡∞æ‡∞≤‡∞ø ‡∞≤‡±á‡∞¶‡∞æ ‡∞™‡∞Ç‡∞ü ‡∞∏‡∞ø‡∞´‡∞æ‡∞∞‡±ç‡∞∏‡±Å ‡∞ï‡∞æ‡∞µ‡∞æ‡∞≤‡∞ø"
    elif lang == "‡§π‡§ø‡§®‡•ç‡§¶‡•Ä":
        welcome_msg = """
        ## üôè ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à ‡§ï‡§ø‡§∏‡§æ‡§® ‡§Æ‡§ø‡§§‡•ç‡§∞‡•ã‡§Ç!
        
        **‡§Ü‡§™‡§ï‡•á ‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§ï‡•É‡§∑‡§ø ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à**
        
        ‡§Ø‡§π ‡§è‡§™‡•ç‡§≤‡§ø‡§ï‡•á‡§∂‡§® ‡§Ü‡§™‡§ï‡•ã ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡§§‡§æ ‡§π‡•à:
        - üå§Ô∏è ‡§Æ‡•å‡§∏‡§Æ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä
        - üå± ‡§´‡§∏‡§≤ ‡§ï‡•Ä ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂‡•á‡§Ç
        - üé§ ‡§µ‡•â‡§á‡§∏ ‡§∏‡§™‡•ã‡§∞‡•ç‡§ü
        
        **‡§Ü‡§™‡§ï‡•ã ‡§ï‡•ç‡§Ø‡§æ ‡§ö‡§æ‡§π‡§ø‡§è? ‡§ï‡•É‡§™‡§Ø‡§æ ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§æ ‡§¨‡•ã‡§≤‡•á‡§Ç...**
        """
        placeholder_text = "‡§â‡§¶‡§æ‡§π‡§∞‡§£: ‡§Æ‡•å‡§∏‡§Æ ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§ú‡§æ‡§®‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡§æ ‡§π‡•Ç‡§Ç ‡§Ø‡§æ ‡§´‡§∏‡§≤ ‡§ï‡•Ä ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂ ‡§ö‡§æ‡§π‡§ø‡§è"
    else:
        welcome_msg = """
        ## üôè Welcome Farmer Friends!
        
        **Welcome to Your Smart Agriculture Assistant**
        
        This application provides you with:
        - üå§Ô∏è Weather Information
        - üå± Crop Recommendations
        - üé§ Voice Support
        
        **What do you need help with? Please type or speak...**
        """
        placeholder_text = "Example: I want to know about weather or need crop recommendation"
    
    st.markdown(f"""
    <div class="welcome-card">
        {welcome_msg}
    </div>
    """, unsafe_allow_html=True)
    
    # Query input section
    st.markdown("""
    <div class="input-group">
        <h4>üéØ Tell me what you need:</h4>
    </div>
    """, unsafe_allow_html=True)
    
    col1, col2 = st.columns([4, 1])
    
    with col1:
        user_query = st.text_input("", placeholder=placeholder_text, key="main_query")
    
    with col2:
        st.markdown("<br>", unsafe_allow_html=True)
        if st.button("üé§", key="voice_main_query", help="Click to speak"):
            with st.spinner("Listening..."):
                lang_code = 'te-IN' if lang == '‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å' else 'hi-IN' if lang == '‡§π‡§ø‡§®‡•ç‡§¶‡•Ä' else 'en-US'
                speech_text = listen_to_speech(lang_code)
                
                if speech_text:
                    st.success(f"Heard: {speech_text}")
                    st.session_state.user_query = speech_text
                    st.session_state.query_type = analyze_query(speech_text)
                    st.session_state.page_state = 'processing'
                    st.rerun()
    
    # Process text input
    if user_query:
        st.session_state.user_query = user_query
        st.session_state.query_type = analyze_query(user_query)
        st.session_state.page_state = 'processing'
        st.rerun()
    
    # Quick action buttons
    st.markdown("### üöÄ Quick Actions:")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üå§Ô∏è Weather Info", type="primary", use_container_width=True):
            st.session_state.query_type = 'weather'
            st.session_state.page_state = 'processing'
            st.rerun()
    
    with col2:
        if st.button("üå± Crop Recommendation", type="primary", use_container_width=True):
            st.session_state.query_type = 'crop'
            st.session_state.page_state = 'processing'
            st.rerun()
    
    with col3:
        if st.button("üè† Home", type="secondary", use_container_width=True):
            st.session_state.page_state = 'welcome'
            st.rerun()

# Processing section
elif st.session_state.page_state == 'processing':
    # Back button
    if st.button("üîô Back to Home", key="back_home"):
        st.session_state.page_state = 'welcome'
        st.rerun()
    
    # Weather section
    if st.session_state.query_type == 'weather':
        st.markdown("""
        <div class="section-card">
            <h2>üå§Ô∏è Weather Forecast</h2>
            <p>Get accurate weather information for your location</p>
        </div>
        """, unsafe_allow_html=True)
        
        # City input
        if lang == "‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å":
            city_label = "‡∞®‡∞ó‡∞∞‡∞Ç ‡∞≤‡±á‡∞¶‡∞æ ‡∞™‡±ç‡∞∞‡∞æ‡∞Ç‡∞§‡∞Ç ‡∞™‡±á‡∞∞‡±Å"
            get_weather_text = "‡∞µ‡∞æ‡∞§‡∞æ‡∞µ‡∞∞‡∞£ ‡∞∏‡∞Æ‡∞æ‡∞ö‡∞æ‡∞∞‡∞Ç ‡∞™‡±ä‡∞Ç‡∞¶‡∞Ç‡∞°‡∞ø"
        elif lang == "‡§π‡§ø‡§®‡•ç‡§¶‡•Ä":
            city_label = "‡§∂‡§π‡§∞ ‡§Ø‡§æ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§ï‡§æ ‡§®‡§æ‡§Æ"
            get_weather_text = "‡§Æ‡•å‡§∏‡§Æ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç"
        else:
            city_label = "City or Area Name"
            get_weather_text = "Get Weather Information"
        
        col1, col2 = st.columns([3, 1])
        
        with col1:
            city = voice_input_field(city_label, "city_input", "text")
        
        with col2:
            st.markdown("<br>", unsafe_allow_html=True)
            if st.button(f"üå§Ô∏è {get_weather_text}", type="primary"):
                if city:
                    with st.spinner("Fetching weather data..."):
                        try:
                            if lang == "‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å":
                                report = get_weather_telugu(city)
                                speak(report, 'te', autoplay=True)
                            elif lang == "‡§π‡§ø‡§®‡•ç‡§¶‡•Ä":
                                report = get_weather_hindi(city)
                                speak(report, 'hi', autoplay=True)
                            else:
                                report = get_weather(city)
                                speak(report, 'en', autoplay=True)
                            
                            st.markdown(f"""
                            <div class="result-box">
                                <h4>üå§Ô∏è Weather Information for {city}</h4>
                                <p>{report}</p>
                            </div>
                            """, unsafe_allow_html=True)
                        except Exception as e:
                            st.error(f"Error fetching weather data: {e}")
                            st.info("Please check the city name and try again.")
    
    # Crop recommendation section
    elif st.session_state.query_type == 'crop':
        crop_model, le = load_models()
        
        st.markdown("""
        <div class="section-card">
            <h2>üå± Crop Recommendation</h2>
            <p>Get personalized crop recommendations based on soil conditions</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Labels based on language
        if lang == "‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å":
            labels = {
                'nitrogen': '‡∞®‡±à‡∞ü‡±ç‡∞∞‡±ã‡∞ú‡∞®‡±ç (N)',
                'phosphorus': '‡∞´‡∞æ‡∞∏‡±ç‡∞´‡∞∞‡∞∏‡±ç (P)',
                'potassium': '‡∞™‡±ä‡∞ü‡∞æ‡∞∑‡∞ø‡∞Ø‡∞Ç (K)',
                'temperature': '‡∞â‡∞∑‡±ç‡∞£‡±ã‡∞ó‡±ç‡∞∞‡∞§ (¬∞C)',
                'humidity': '‡∞§‡±á‡∞Æ (%)',
                'ph': 'pH ‡∞∏‡±ç‡∞•‡∞æ‡∞Ø‡∞ø',
                'rainfall': '‡∞µ‡∞∞‡±ç‡∞∑‡∞™‡∞æ‡∞§‡∞Ç (mm)',
                'get_recommendation': '‡∞™‡∞Ç‡∞ü ‡∞∏‡∞ø‡∞´‡∞æ‡∞∞‡±ç‡∞∏‡±Å ‡∞™‡±ä‡∞Ç‡∞¶‡∞Ç‡∞°‡∞ø'
            }
        elif lang == "‡§π‡§ø‡§®‡•ç‡§¶‡•Ä":
            labels = {
                'nitrogen': '‡§®‡§æ‡§á‡§ü‡•ç‡§∞‡•ã‡§ú‡§® (N)',
                'phosphorus': '‡§´‡•â‡§∏‡•ç‡§´‡•ã‡§∞‡§∏ (P)',
                'potassium': '‡§™‡•ã‡§ü‡•á‡§∂‡§ø‡§Ø‡§Æ (K)',
                'temperature': '‡§§‡§æ‡§™‡§Æ‡§æ‡§® (¬∞C)',
                'humidity': '‡§Ü‡§∞‡•ç‡§¶‡•ç‡§∞‡§§‡§æ (%)',
                'ph': 'pH ‡§∏‡•ç‡§§‡§∞',
                'rainfall': '‡§µ‡§∞‡•ç‡§∑‡§æ (mm)',
                'get_recommendation': '‡§´‡§∏‡§≤ ‡§ï‡•Ä ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç'
            }
        else:
            labels = {
                'nitrogen': 'Nitrogen (N)',
                'phosphorus': 'Phosphorus (P)',
                'potassium': 'Potassium (K)',
                'temperature': 'Temperature (¬∞C)',
                'humidity': 'Humidity (%)',
                'ph': 'pH Level',
                'rainfall': 'Rainfall (mm)',
                'get_recommendation': 'Get Crop Recommendation'
            }
        
        # Input fields in a grid layout
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.markdown('<div class="step-card">', unsafe_allow_html=True)
            n = voice_input_field(labels['nitrogen'], "nitrogen", "number", 0, 200)
            temp = voice_input_field(labels['temperature'], "temperature", "float", 10.0, 50.0, 0.1)
            ph = voice_input_field(labels['ph'], "ph", "float", 0.0, 14.0, 0.1)
            st.markdown('</div>', unsafe_allow_html=True)
        
        with col2:
            st.markdown('<div class="step-card">', unsafe_allow_html=True)
            p = voice_input_field(labels['phosphorus'], "phosphorus", "number", 0, 200)
            hum = voice_input_field(labels['humidity'], "humidity", "float", 10.0, 100.0, 0.1)
            st.markdown('</div>', unsafe_allow_html=True)
        
        with col3:
            st.markdown('<div class="step-card">', unsafe_allow_html=True)
            k = voice_input_field(labels['potassium'], "potassium", "number", 0, 200)
            rain = voice_input_field(labels['rainfall'], "rainfall", "float", 0.0, 500.0, 0.1)
            st.markdown('</div>', unsafe_allow_html=True)
        
        # Recommendation button
        st.markdown("<br>", unsafe_allow_html=True)
        col1, col2, col3 = st.columns([1, 1, 1])
        
        with col2:
            if st.button(f"üåæ {labels['get_recommendation']}", type="primary", use_container_width=True):
                # Validate inputs
                if all([n is not None, p is not None, k is not None, temp is not None, hum is not None, ph is not None, rain is not None]):
                    with st.spinner("Analyzing soil conditions..."):
                        try:
                            features = [[n, p, k, temp, hum, ph, rain]]
                            prediction = crop_model.predict(features)[0]
                            crop = le.inverse_transform([prediction])[0]
                            
                            if lang == "‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å":
                                output = f"‡∞∏‡∞ø‡∞´‡∞æ‡∞∞‡±ç‡∞∏‡±Å ‡∞ö‡±á‡∞∏‡∞ø‡∞® ‡∞™‡∞Ç‡∞ü: {crop}"
                                detailed_msg = f"‡∞Æ‡±Ä ‡∞Æ‡∞ü‡±ç‡∞ü‡∞ø ‡∞™‡∞∞‡∞ø‡∞∏‡±ç‡∞•‡∞ø‡∞§‡±Å‡∞≤ ‡∞Ü‡∞ß‡∞æ‡∞∞‡∞Ç‡∞ó‡∞æ, {crop} ‡∞™‡∞Ç‡∞ü ‡∞Ö‡∞§‡±ç‡∞Ø‡±Å‡∞§‡±ç‡∞§‡∞Æ‡∞Æ‡±à‡∞®‡∞¶‡∞ø. ‡∞à ‡∞™‡∞Ç‡∞ü ‡∞Æ‡±Ä ‡∞™‡±ç‡∞∞‡∞æ‡∞Ç‡∞§‡∞Ç‡∞≤‡±ã ‡∞¨‡∞æ‡∞ó‡∞æ ‡∞™‡±Ü‡∞∞‡±Å‡∞ó‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø."
                            elif lang == "‡§π‡§ø‡§®‡•ç‡§¶‡•Ä":
                                output = f"‡§Ö‡§®‡•Å‡§∂‡§Ç‡§∏‡§ø‡§§ ‡§´‡§∏‡§≤: {crop}"
                                detailed_msg = f"‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞, {crop} ‡§´‡§∏‡§≤ ‡§∏‡§¨‡§∏‡•á ‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§π‡•à‡•§ ‡§Ø‡§π ‡§´‡§∏‡§≤ ‡§Ü‡§™‡§ï‡•á ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§Æ‡•á‡§Ç ‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§§‡§∞‡§π ‡§∏‡•á ‡§¨‡§¢‡§º‡•á‡§ó‡•Ä‡•§"
                            else:
                                output = f"Recommended Crop: {crop}"
                                detailed_msg = f"Based on your soil conditions, {crop} is the optimal choice. This crop will thrive in your region."
                            
                            st.markdown(f"""
                            <div class="result-box">
                                <h3>üéØ Recommendation Result</h3>
                                <h4>{output}</h4>
                                <p>{detailed_msg}</p>
                            </div>
                            """, unsafe_allow_html=True)
                            
                            # Auto-play recommendation
                            lang_code = 'te' if lang == "‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å" else 'hi' if lang == "‡§π‡§ø‡§®‡•ç‡§¶‡•Ä" else 'en'
                            speak(f"{output}. {detailed_msg}", lang_code, autoplay=True)
                        except Exception as e:
                            st.error(f"Error generating recommendation: {e}")
                else:
                    if lang == "‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å":
                        st.warning("‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞Ö‡∞®‡±ç‡∞®‡∞ø ‡∞Ö‡∞µ‡∞∏‡∞∞‡∞Æ‡±à‡∞® ‡∞´‡±Ä‡∞≤‡±ç‡∞°‡±ç‚Äå‡∞≤‡∞®‡±Å ‡∞™‡±Ç‡∞∞‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø.")
                    elif lang == "‡§π‡§ø‡§®‡•ç‡§¶‡•Ä":
                        st.warning("‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§≠‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§´‡§º‡•Ä‡§≤‡•ç‡§° ‡§≠‡§∞‡•á‡§Ç‡•§")
                    else:
                        st.warning("Please fill in all the required fields.")
    
    # General query handling
    else:
        st.markdown("""
        <div class="section-card">
            <h2>ü§ñ General Query</h2>
            <p>I can help you with weather information and crop recommendations!</p>
        </div>
        """, unsafe_allow_html=True)
        
        if lang == "‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å":
            response = """
            ‡∞®‡±á‡∞®‡±Å ‡∞Æ‡±Ä‡∞ï‡±Å ‡∞∏‡∞π‡∞æ‡∞Ø‡∞Ç ‡∞ö‡±á‡∞Ø‡∞ó‡∞≤‡∞®‡±Å:
            - üå§Ô∏è ‡∞µ‡∞æ‡∞§‡∞æ‡∞µ‡∞∞‡∞£ ‡∞∏‡∞Æ‡∞æ‡∞ö‡∞æ‡∞∞‡∞Ç ‡∞ï‡±ã‡∞∏‡∞Ç
            - üå± ‡∞™‡∞Ç‡∞ü ‡∞∏‡∞ø‡∞´‡∞æ‡∞∞‡±ç‡∞∏‡±Å‡∞≤ ‡∞ï‡±ã‡∞∏‡∞Ç
            
            ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞Æ‡±Ä ‡∞™‡±ç‡∞∞‡∞∂‡±ç‡∞®‡∞®‡±Å ‡∞Æ‡∞∞‡∞ø‡∞Ç‡∞§ ‡∞∏‡±ç‡∞™‡∞∑‡±ç‡∞ü‡∞Ç‡∞ó‡∞æ ‡∞ö‡±Ü‡∞™‡±ç‡∞™‡∞Ç‡∞°‡∞ø.
            """
        elif lang == "‡§π‡§ø‡§®‡•ç‡§¶‡•Ä":
            response = """
            ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç:
            - üå§Ô∏è ‡§Æ‡•å‡§∏‡§Æ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è
            - üå± ‡§´‡§∏‡§≤ ‡§ï‡•Ä ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è
            
            ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§î‡§∞ ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§¨‡§§‡§æ‡§è‡§Ç‡•§
            """
        else:
            response = """
            I can help you with:
            - üå§Ô∏è Weather information
            - üå± Crop recommendations
            
            Please specify your query more clearly.
            """
        
        st.markdown(f"""
        <div class="result-box">
            <h4>How can I help you?</h4>
            <p>{response}</p>
        </div>
        """, unsafe_allow_html=True)

# Voice commands help
with st.expander("üéôÔ∏è Voice Commands Help"):
    if lang == "‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å":
        help_text = """
        **‡∞µ‡∞æ‡∞Ø‡∞ø‡∞∏‡±ç ‡∞á‡∞®‡±ç‚Äå‡∞™‡±Å‡∞ü‡±ç ‡∞é‡∞≤‡∞æ ‡∞â‡∞™‡∞Ø‡±ã‡∞ó‡∞ø‡∞Ç‡∞ö‡∞æ‡∞≤‡∞ø:**
        - ‡∞è‡∞¶‡±à‡∞®‡∞æ ‡∞á‡∞®‡±ç‚Äå‡∞™‡±Å‡∞ü‡±ç ‡∞´‡±Ä‡∞≤‡±ç‡∞°‡±ç ‡∞™‡∞ï‡±ç‡∞ï‡∞® ‡∞â‡∞®‡±ç‡∞® üé§ ‡∞¨‡∞ü‡∞®‡±ç‚Äå‡∞®‡±Å ‡∞ï‡±ç‡∞≤‡∞ø‡∞ï‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø
        - ‡∞Æ‡±à‡∞ï‡±ç‡∞∞‡±ã‡∞´‡±ã‡∞®‡±ç‚Äå‡∞≤‡±ã ‡∞∏‡±ç‡∞™‡∞∑‡±ç‡∞ü‡∞Ç‡∞ó‡∞æ ‡∞Æ‡∞æ‡∞ü‡±ç‡∞≤‡∞æ‡∞°‡∞Ç‡∞°‡∞ø
        - ‡∞∏‡∞Ç‡∞ñ‡±ç‡∞Ø‡∞≤ ‡∞ï‡±ã‡∞∏‡∞Ç, ‡∞µ‡∞æ‡∞ü‡∞ø‡∞®‡∞ø ‡∞∏‡±ç‡∞™‡∞∑‡±ç‡∞ü‡∞Ç‡∞ó‡∞æ ‡∞ö‡±Ü‡∞™‡±ç‡∞™‡∞Ç‡∞°‡∞ø (‡∞â‡∞¶‡∞æ: "‡∞á‡∞∞‡∞µ‡±à ‡∞ê‡∞¶‡±Å" 25 ‡∞ï‡±ã‡∞∏‡∞Ç)
        - ‡∞®‡∞ó‡∞∞ ‡∞™‡±á‡∞∞‡±ç‡∞≤‡∞®‡±Å ‡∞∏‡±ç‡∞™‡∞∑‡±ç‡∞ü‡∞Ç‡∞ó‡∞æ ‡∞ö‡±Ü‡∞™‡±ç‡∞™‡∞Ç‡∞°‡∞ø
        
        **‡∞∏‡∞™‡±ã‡∞∞‡±ç‡∞ü‡±ç ‡∞ö‡±á‡∞Ø‡∞¨‡∞°‡∞ø‡∞® ‡∞≠‡∞æ‡∞∑‡∞≤‡±Å:**
        - English: ‡∞™‡±Ç‡∞∞‡±ç‡∞§‡∞ø ‡∞µ‡∞æ‡∞Ø‡∞ø‡∞∏‡±ç ‡∞∏‡∞™‡±ã‡∞∞‡±ç‡∞ü‡±ç
        - ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å: ‡∞µ‡∞æ‡∞Ø‡∞ø‡∞∏‡±ç ‡∞á‡∞®‡±ç‚Äå‡∞™‡±Å‡∞ü‡±ç ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞Ö‡∞µ‡±Å‡∞ü‡±ç‚Äå‡∞™‡±Å‡∞ü‡±ç
        - ‡§π‡§ø‡§®‡•ç‡§¶‡•Ä: ‡∞µ‡∞æ‡∞Ø‡∞ø‡∞∏‡±ç ‡∞á‡∞®‡±ç‚Äå‡∞™‡±Å‡∞ü‡±ç ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞Ö‡∞µ‡±Å‡∞ü‡±ç‚Äå‡∞™‡±Å‡∞ü‡±ç
        
        **‡∞ö‡∞ø‡∞ü‡±ç‡∞ï‡∞æ‡∞≤‡±Å:**
        - ‡∞Æ‡±Ä ‡∞Æ‡±à‡∞ï‡±ç‡∞∞‡±ã‡∞´‡±ã‡∞®‡±ç ‡∞™‡∞®‡∞ø ‡∞ö‡±á‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞®‡∞ø ‡∞®‡∞ø‡∞∞‡±ç‡∞ß‡∞æ‡∞∞‡∞ø‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø
        - ‡∞®‡∞ø‡∞∂‡±ç‡∞∂‡∞¨‡±ç‡∞¶‡∞Æ‡±à‡∞® ‡∞µ‡∞æ‡∞§‡∞æ‡∞µ‡∞∞‡∞£‡∞Ç‡∞≤‡±ã ‡∞Æ‡∞æ‡∞ü‡±ç‡∞≤‡∞æ‡∞°‡∞Ç‡∞°‡∞ø
        - ‡∞™‡±ç‡∞∞‡∞æ‡∞Ç‡∞™‡±ç‡∞ü‡±ç ‡∞ö‡±á‡∞∏‡∞ø‡∞®‡∞™‡±ç‡∞™‡±Å‡∞°‡±Å ‡∞Æ‡±à‡∞ï‡±ç‡∞∞‡±ã‡∞´‡±ã‡∞®‡±ç ‡∞Ö‡∞®‡±Å‡∞Æ‡∞§‡±Å‡∞≤‡∞®‡±Å ‡∞Ö‡∞®‡±Å‡∞Æ‡∞§‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø
        """
    elif lang == "‡§π‡§ø‡§®‡•ç‡§¶‡•Ä":
        help_text = """
        **‡§µ‡•â‡§á‡§∏ ‡§á‡§®‡§™‡•Å‡§ü ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡•à‡§∏‡•á ‡§ï‡§∞‡•á‡§Ç:**
        - ‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä ‡§á‡§®‡§™‡•Å‡§ü ‡§´‡•Ä‡§≤‡•ç‡§° ‡§ï‡•á ‡§¨‡§ó‡§≤ ‡§Æ‡•á‡§Ç üé§ ‡§¨‡§ü‡§® ‡§™‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡•á‡§Ç
        - ‡§Ö‡§™‡§®‡•á ‡§Æ‡§æ‡§á‡§ï‡•ç‡§∞‡•ã‡§´‡•ã‡§® ‡§Æ‡•á‡§Ç ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§¨‡•ã‡§≤‡•á‡§Ç
        - ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ‡§ì‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è, ‡§â‡§®‡•ç‡§π‡•á‡§Ç ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§¨‡•ã‡§≤‡•á‡§Ç (‡§ú‡•à‡§∏‡•á: "‡§™‡§ö‡•ç‡§ö‡•Ä‡§∏" 25 ‡§ï‡•á ‡§≤‡§ø‡§è)
        - ‡§∂‡§π‡§∞ ‡§ï‡•á ‡§®‡§æ‡§Æ ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§¨‡•ã‡§≤‡•á‡§Ç
        
        **‡§∏‡§Æ‡§∞‡•ç‡§•‡§ø‡§§ ‡§≠‡§æ‡§∑‡§æ‡§è‡§Ç:**
        - English: ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§µ‡•â‡§á‡§∏ ‡§∏‡§™‡•ã‡§∞‡•ç‡§ü
        - ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å: ‡§µ‡•â‡§á‡§∏ ‡§á‡§®‡§™‡•Å‡§ü ‡§î‡§∞ ‡§Ü‡§â‡§ü‡§™‡•Å‡§ü
        - ‡§π‡§ø‡§®‡•ç‡§¶‡•Ä: ‡§µ‡•â‡§á‡§∏ ‡§á‡§®‡§™‡•Å‡§ü ‡§î‡§∞ ‡§Ü‡§â‡§ü‡§™‡•Å‡§ü
        
        **‡§∏‡•Å‡§ù‡§æ‡§µ:**
        - ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§Ü‡§™‡§ï‡§æ ‡§Æ‡§æ‡§á‡§ï‡•ç‡§∞‡•ã‡§´‡•ã‡§® ‡§ï‡§æ‡§Æ ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•à
        - ‡§∂‡§æ‡§Ç‡§§ ‡§µ‡§æ‡§§‡§æ‡§µ‡§∞‡§£ ‡§Æ‡•á‡§Ç ‡§¨‡•ã‡§≤‡•á‡§Ç
        - ‡§™‡•ç‡§∞‡•â‡§Æ‡•ç‡§™‡•ç‡§ü ‡§π‡•ã‡§®‡•á ‡§™‡§∞ ‡§Æ‡§æ‡§á‡§ï‡•ç‡§∞‡•ã‡§´‡•ã‡§® ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø‡§Ø‡§æ‡§Ç ‡§¶‡•á‡§Ç
        """
    else:
        help_text = """
        **How to use voice input:**
        - Click the üé§ button next to any input field
        - Speak clearly into your microphone
        - For numbers, say them clearly (e.g., "twenty five" for 25)
        - For city names, speak the name clearly
        
        **Supported Languages:**
        - English: Full voice support
        - ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å: Voice input and output
        - ‡§π‡§ø‡§®‡•ç‡§¶‡•Ä: Voice input and output
        
        **Tips:**
        - Ensure your microphone is working
        - Speak in a quiet environment
        - Allow microphone permissions when prompted
        """
    
    st.markdown(help_text)

# Footer
st.markdown("---")
if lang == "‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å":
    footer_text = "üåø AI ‡∞Ö‡∞ó‡±ç‡∞∞‡∞ø ‡∞µ‡∞æ‡∞Ø‡∞ø‡∞∏‡±ç ‡∞Ö‡∞∏‡∞ø‡∞∏‡±ç‡∞ü‡±Ü‡∞Ç‡∞ü‡±ç - ‡∞∞‡±à‡∞§‡±Å‡∞≤‡∞ï‡±Å ‡∞§‡±Ü‡∞≤‡∞ø‡∞µ‡±à‡∞® ‡∞®‡∞ø‡∞∞‡±ç‡∞£‡∞Ø‡∞æ‡∞≤‡±Å ‡∞§‡±Ä‡∞∏‡±Å‡∞ï‡±ã‡∞µ‡∞°‡∞Ç‡∞≤‡±ã ‡∞∏‡∞π‡∞æ‡∞Ø‡∞™‡∞°‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø"
elif lang == "‡§π‡§ø‡§®‡•ç‡§¶‡•Ä":
    footer_text = "üåø AI ‡§è‡§ó‡•ç‡§∞‡•Ä ‡§µ‡•â‡§á‡§∏ ‡§Ö‡§∏‡§ø‡§∏‡•ç‡§ü‡•á‡§Ç‡§ü - ‡§ï‡§ø‡§∏‡§æ‡§®‡•ã‡§Ç ‡§ï‡•ã ‡§∏‡•Ç‡§ö‡§ø‡§§ ‡§®‡§ø‡§∞‡•ç‡§£‡§Ø ‡§≤‡•á‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à"
else:
    footer_text = "üåø AI Agri Voice Assistant - Helping farmers make informed decisions"

st.markdown(f"""
<div style="text-align: center; color: #4CAF50; padding: 2rem; font-weight: bold;">
    {footer_text}
</div>
""", unsafe_allow_html=True)
